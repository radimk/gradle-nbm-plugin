apply plugin: 'groovy'
apply plugin: 'java'
// apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'java-gradle-plugin'
apply plugin: "nebula.release"
apply plugin: "com.diffplug.spotless"
apply plugin: 'codenarc'

def compatibilityVersion = JavaVersion.VERSION_1_8
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

rootProject.tasks.release.dependsOn tasks.publish

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

sourceSets {
    integTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integTestImplementation.extendsFrom testImplementation
    integTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation "org.gradle:gradle-tooling-api:${gradle.gradleVersion}"
    implementation "org.codehaus.mojo:nbm-maven-harness:8.2"
    runtimeClasspath 'org.slf4j:slf4j-simple:1.7.5'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"

    testImplementation "org.spockframework:spock-core:2.0-groovy-3.0", {
        exclude module: "groovy-all"
    }
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation "com.google.guava:guava:14.0.1"
    testImplementation group: 'xml-resolver', name: 'xml-resolver', version: '1.2'

    codenarc "org.codenarc:CodeNarc:2.2.0"
    codenarc "org.codehaus.groovy:groovy-all:3.0.9"
}
repositories {
    maven {
        url 'https://repo.gradle.org/gradle/libs-releases'
    }
    mavenCentral()
}

def catalogPath = file('src/integTest/resources/catalog.xml').canonicalPath

test {
    useJUnitPlatform()
}

task integTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    reports.junitXml.destination = file("${project.testResultsDir}/$name")
    reports.html.destination = file("${project.reporting.baseDir}/$name")

    shouldRunAfter test

    systemProperty "xml.catalog.files", catalogPath

    useJUnitPlatform()
}

task testJenkins(dependsOn: test) {
    description '=== Update the timestamp of the test results also if UP-TO-DATE ==='
    inputs.files test.outputs.files
    doLast {
        def timestamp = System.currentTimeMillis()
        testResultsDir.eachFile { it.lastModified = timestamp }
    }
}
check.dependsOn testJenkins, integTest

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'cz.kubacki.gradle.plugins'
            artifactId 'gradle-nbm-plugin'
            version project.version

            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
    repositories {
        maven {
            name 'LocalRepo'
            url uri("$buildDir/repo")
        }
    }
}

idea.module {
    testSourceDirs += file('src/integTest/groovy')
}

codenarc {
    toolVersion = '2.2.0'
    configFile = rootProject.file('gradle/codenarc.groovy')
    reportFormat = 'html'
}

codenarcMain {
    compilationClasspath = sourceSets.main.compileClasspath + sourceSets.main.output
}

codenarcTest {
    compilationClasspath = sourceSets.test.compileClasspath + sourceSets.test.output
}

codenarcIntegTest {
    compilationClasspath = sourceSets.integTest.compileClasspath + sourceSets.integTest.output
}

tasks.register("qualityCheck") {
    group = "Verification"
    description = "Runs linters and code style checking tools (excluding tests)"
    dependsOn tasks.classes, tasks.testClasses, tasks.integTestClasses, tasks.spotlessCheck
    dependsOn tasks.codenarcMain, tasks.codenarcTest, tasks.codenarcIntegTest
}

spotless {
    java {
        target '**/*.java'
        targetExclude "$buildDir/**/*.java"

        importOrder('', 'javax', 'java', '\\#')
        eclipse().configFile(rootProject.file('gradle/greclipse.properties'))

        indentWithSpaces()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovy {
        target '**/*.groovy'
        targetExclude "$buildDir/**/*.groovy"
        importOrder('', 'javax', 'java', '\\#')

        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target('*.gradle')
        targetExclude "$buildDir/**/*.gradle"

        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'yaml', {
        target("*.yml")
        targetExclude "$buildDir/**/*"

        trimTrailingWhitespace()
        endWithNewline()
        indentWithSpaces(2)
    }
}
